generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model exchange {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stock       stock[]
}

model portfolio {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(255)
  user_id         String?           @db.Uuid
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  user            user?             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  portfolio_stock portfolio_stock[]
}

model portfolio_stock {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  portfolio_id String?    @db.Uuid
  stock_id     String?    @db.Uuid
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  updated_at   DateTime   @default(now()) @db.Timestamp(6)
  portfolio    portfolio? @relation(fields: [portfolio_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stock        stock?     @relation(fields: [stock_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model stock {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  symbol          String            @db.VarChar(50)
  name            String            @db.VarChar(255)
  exchange_id     String?           @db.Uuid
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  portfolio_stock portfolio_stock[]
  exchange        exchange?         @relation(fields: [exchange_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  trade           trade[]
}

model trade {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type       String   @db.VarChar(50)
  quantity   Int
  price      Int
  stock_id   String?  @db.Uuid
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  stock      stock?   @relation(fields: [stock_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String      @unique @db.VarChar(255)
  firstName   String?     @db.VarChar(255)
  lastName    String?     @db.VarChar(255)
  roq_user_id String      @db.VarChar(255)
  tenant_id   String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  exchange    exchange[]
  portfolio   portfolio[]
  trade       trade[]
}
